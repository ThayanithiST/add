package com.simplilearn.mavenproject;

import java.util.Iterator;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class Testing {

	 public static void main(String[] args) {
	        ObjectMapper mapper = new ObjectMapper();
	        String jsonString = "{\n" +
	                "    \"name\": \"flow\",\n" +
	                "    \"enteries\": [\n" +
	                "        {\n" +
	                "            \"username\": \"${application.username}\",\n" +
	                "            \"host\": \"p(application.host)\",\n" +
	                "            \"properties\": [\n" +
	                "                {\n" +
	                "                    \"password\": \"${application.password}\",\n" +
	                "                    \"port\": \"application.p(port)\"\n" +
	                "                }\n" +
	                "            ]\n" +
	                "        }\n" +
	                "    ]\n" +
	                "}";
	        try {
	            JsonNode rootNode = mapper.readTree(jsonString);
	            replacePlaceholders(rootNode);
	            System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode));
	        } catch (JsonProcessingException e) {
	            e.printStackTrace();
	        }
	        System.out.println("Completed");
	    }

	    private static void replacePlaceholders(JsonNode node) {
	        if (node.isObject()) {
	            ObjectNode objectNode = (ObjectNode) node;
	            Iterator<Map.Entry<String, JsonNode>> fields = objectNode.fields();
	            while (fields.hasNext()) {
	                Map.Entry<String, JsonNode> field = fields.next();
	                JsonNode valueNode = field.getValue();
	                if (valueNode.isValueNode() && valueNode.isTextual()) {
	                    String value = valueNode.asText();
	                    String key = field.getKey();
	                    if (value.startsWith("${") && value.endsWith("}")) {
	                        String replaceVal = getPlaceholderValue(value);
	                        objectNode.put(key, replaceVal);
	                    } else if (value.startsWith("p(") && value.endsWith(")")) {
	                        String replaceVal = getPValue(value);
	                        objectNode.put(key, replaceVal);
	                    }
	                } else {
	                    replacePlaceholders(valueNode);
	                }
	            }
	        } else if (node.isArray()) {
	            for (JsonNode arrayNode : node) {
	                replacePlaceholders(arrayNode);
	            }
	        }
	    }

	    private static String getPlaceholderValue(String value) {
	        String cleanDynamicPart = value.substring(2, value.length() - 1); // Remove "${" and "}"
	        String[] parts = cleanDynamicPart.split("\\.");
	        StringBuilder pathBuilder = new StringBuilder("lib.get('config').get('expression')");

	        for (String part : parts) {
	            pathBuilder.append(".get('").append(part).append("')");
	        }

	        return pathBuilder.toString();
	    }

	    private static String getPValue(String value) {
	        String dynamicPart = value.substring(2, value.length() - 1); // Remove "p(" and ")"
	        String[] parts = dynamicPart.split("\\.");
	        StringBuilder pathBuilder = new StringBuilder("lib.get('config').get('expression')");

	        for (String part : parts) {
	            pathBuilder.append(".get('").append(part).append("')");
	        }

	        return pathBuilder.toString();
	    }
}




{ "flow": "#[p(\"name.value\")]", "pipeline": "smb://p(port.value)/p(host.value)/text.csv", "enteries": [ { "snap_map": { "value": "smb://${username.value}/${password.value}/text.csv" }, "host": "${host.value}/ty", "port":"smb://Mule:p(\"port.value\")/Mule:p(\"host.value\")/text.csv" } ] }


public void replaceYamlToSnapExpression(JsonNode rootTemplate) {            if (rootTemplate.isObject()) { ObjectNode objectNode = (ObjectNode) rootTemplate; Iterator<Map.Entry<String, JsonNode>> fields = objectNode.fields(); while (fields.hasNext()) { Map.Entry<String, JsonNode> field = fields.next(); JsonNode valueNode = field.getValue(); if (valueNode.isValueNode() && valueNode.isTextual()) { String value = valueNode.asText(); String key = field.getKey(); String regex = "\\$\\{[^:\\s]+\\}";        Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(value); if (value.contains("${") && value.contains("}") && matcher.find()) { String replaceVal = this.replcaeParenthesesValue(value); objectNode.put(key, replaceVal); } else if (value.contains("p(") && value.contains(")")) { String replaceVal = this.replaceMulePValue(value); objectNode.put(key, replaceVal); } } else { this.replaceYamlToSnapExpression(valueNode); } } } else if (rootTemplate.isArray()) { for (JsonNode arrayNode : rootTemplate) {   replaceYamlToSnapExpression(arrayNode); } }   }   public String replcaeParenthesesValue(String value) {     StringBuilder result = new StringBuilder();     int startIndex = 0;     int preEndIndex = 0;     int endIndex;     int lastIndex = value.length();     while ((startIndex = value.indexOf("${", startIndex)) != -1) {       result.append(value, preEndIndex, startIndex);       endIndex = value.indexOf("}", startIndex);       if (endIndex == -1) {         result.append(value.substring(startIndex));         break;       }       String placeholder = value.substring(startIndex, endIndex + 1);       String cleanDynamicPart = placeholder.substring(2, placeholder.length() - 1);       String[] parts = cleanDynamicPart.split("\\.");       StringBuilder pathBuilder = new StringBuilder();       pathBuilder.append("lib.get('config').get('Expression')");       for (String part : parts) {         pathBuilder.append(".get('").append(part).append("')");       }       result.append(pathBuilder);       preEndIndex = endIndex + 1;       startIndex = endIndex + 1;     }     if (preEndIndex != lastIndex)       result.append(value, preEndIndex, lastIndex);     return result.toString();   }   public String replaceMulePValue(String value) {     StringBuilder result = new StringBuilder();     int index = 0;     int lastIndex = 0;     while ((index = value.indexOf("Mule:p(", lastIndex)) != -1) {       result.append(value.substring(lastIndex, index));       lastIndex = index + "Mule:p(".length();       int endIndex = value.indexOf(")", lastIndex);       String placeholder = value.substring(lastIndex, endIndex);       String cleanDynamicPart = placeholder;       String[] parts = cleanDynamicPart.split("\\.");       StringBuilder pathBuilder = new StringBuilder();       pathBuilder.append("lib.get('config').get('Expression')");       for (String part : parts) {         pathBuilder.append(".get('").append(part).append("')");       }       result.append(pathBuilder);       lastIndex = endIndex + 1;     }     result.append(value.substring(lastIndex));     return result.toString();   }   
